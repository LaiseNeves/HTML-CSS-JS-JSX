Comandos: 

____________________________________________________________________________________________________________________________________________________________________________________________________________
Bases:
____________________________________________________________________________________________________________________________________________________________________________________________________________
<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Criando LadingPage</title>

<!DOCTYPE html>
<html>
  <body>
    <p>subscribe</p>
     <button>subscribe</button>
  </body>
</html>

____________________________________________________________________________________________________________________________________________________________________________________________________________
Anotacoes
____________________________________________________________________________________________________________________________________________________________________________________________________________

< > tag
< tag de abrir 
/> tag de fechar
tem as tags vazias: <br>

Elemento para deixar em italico <em>texto</em>
Elemento para deixar em negrito <strong>texto</strong>

Arredondar borda
border-radius: 10px 20px 30px;

Atributos adicionam informacoes adicionais as tags

Exemplo de como por link
<a href="https://www.mimo.org/r/lisa.html">Click to visit my web site!</a>
href é um atributo

Modelo de botao 
<button>Botao</button>

____________________________________________________________________________________________________________________________________________________________________________________________________________
CAIXA BRANCA: 
____________________________________________________________________________________________________________________________________________________________________________________________________________

Para criar uma caixa branca em HTML com CSS, use a tag <div> no HTML e aplique estilos CSS para definir a caixa como um retângulo branco com bordas, se necessário. 

Código HTML:
<div class="box">
  <!-- Conteúdo da caixa aqui -->
</div>
Código CSS:
Código


Codigo CSS:
.box {
  width: 200px;       /* Largura da caixa */
  height: 100px;      /* Altura da caixa */
  background-color: white; /* Cor de fundo da caixa (branco) */
  border: 1px solid black; /* Borda da caixa (opcional) */
  padding: 10px;      /* Preenchimento interno da caixa */
}


Explicação:
- <div>: A tag <div> cria um contêiner genérico para outros elementos HTML, ideal para criar caixas.
- class="box": Define uma classe para o elemento, permitindo que o CSS o selecione.
- width e height: Definem a largura e altura da caixa em pixels ou outras unidades.
- background-color: white: Define a cor de fundo da caixa como branco.
- border: 1px solid black: (Opcional) Define uma borda ao redor da caixa, com 1 pixel de espessura, sólida e de cor preta. Você pode alterar a cor e o estilo da borda.
- padding: 10px: (Opcional) Define o espaçamento interno da caixa, ou seja, a distância entre o conteúdo e a borda (se houver).

- Outras propriedades CSS úteis:
margin: Define o espaço externo ao redor da caixa, que a separa de outros elementos.
border-radius: Define os cantos arredondados da caixa.
text-align: Alinha o texto dentro da caixa.
display: Define como o elemento é exibido (por exemplo, block, inline, inline-block). 


___________________________________________________________________________________________________________________________________________________________________
Colocar imagem ao lado da outra
___________________________________________________________________________________________________________________________________________________________________

Para colocar uma imagem ao lado da outra em HTML e CSS, você pode usar o CSS para modificar a propriedade display das imagens para inline-block ou usar o sistema de 
layout flexbox. O método display: inline-block é simples e eficaz para casos em que você precisa de mais controle sobre o espaçamento entre as imagens. Para o método 
flexbox, você pode envolver as imagens em um contêiner e configurar o CSS para alinhar os itens horizontalment

-->Metodo inline-block:

HTML
    <img src="imagem1.jpg" alt="Descrição da imagem 1">
    <img src="imagem2.jpg" alt="Descrição da imagem 2">

CSS
    img {
      display: inline-block; /* Permite que as imagens sejam tratadas como blocos de texto, permitindo que fiquem na mesma linha */
      vertical-align: top; /* Alinha as imagens no topo para evitar que elas se movam para baixo */
      width: 50%; /* Define a largura de cada imagem para ocupar metade da tela */
      margin-right: 10px; /* Adiciona um espaço de 10 pixels entre as imagens */
    }



-->Método flex-box

HTML
    <div class="imagens">
        <img src="imagem1.jpg" alt="Descrição da imagem 1">
        <img src="imagem2.jpg" alt="Descrição da imagem 2">
    </div>


CSS
    .imagens {
      display: flex; /* Define o contêiner como um layout flexbox */
      flex-direction: row; /* Alinha os itens horizontalmente */
      justify-content: space-between; /* Distribuí espaço entre os itens */
      align-items: center; /* Alinha os itens verticalmente */
    }

    .imagens img {
      width: 48%; /* Define a largura das imagens */
      height: auto; /* Mantém a proporção da imagem */
    }

Explicação:
- display: inline-block: Esta propriedade permite que as imagens se comportem como blocos de texto, permitindo que sejam colocadas na mesma linha. Ao combinar inline-block com a propriedade vertical-align, você pode ajustar a posição vertical das imagens para que não se movam para baixo.
- width: Define a largura das imagens. No exemplo acima, as imagens ocupam 50% da largura do contêiner, mas você pode ajustar o valor conforme necessário.
- margin-right: Adiciona um espaço entre as imagens. No exemplo acima, há 10 pixels de espaço entre as imagens.
- display: flex: Define o contêiner como um layout flexbox, permitindo que você controle a forma como os elementos são alinhados e espaçados.
- flex-direction: row: Define que os itens serão dispostos horizontalmente, lado a lado.
- justify-content: space-between: Distribuí espaços entre os itens, alinhando-os nas extremidades do contêiner.
- align-items: center: Alinha os itens verticalmente no centro do contêiner.
- width e height no flexbox: Define a largura e altura das imagens. No exemplo acima, a altura é definida como auto para manter a proporção da imagem. 
