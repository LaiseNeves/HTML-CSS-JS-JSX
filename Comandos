Comandos: 

____________________________________________________________________________________________________________________________________________________________________________________________________________
Bases:
____________________________________________________________________________________________________________________________________________________________________________________________________________
<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Criando LadingPage</title>

<!DOCTYPE html>
<html>
  <body>
    <p>subscribe</p>
     <button>subscribe</button>
  </body>
</html>

____________________________________________________________________________________________________________________________________________________________________________________________________________
Anotacoes
____________________________________________________________________________________________________________________________________________________________________________________________________________

< > tag
< tag de abrir 
/> tag de fechar
tem as tags vazias: <br>, <img> 

existe os atributos: width e height

Arredondar borda
border-radius: 10px 20px 30px;

Exemplo de como por link
<a href="https://www.mimo.org/r/lisa.html">Click to visit my web site!</a>
href é um atributo

Modelo de botao 
<button>Botao</button>


___________________________________________________________________________________________________________________________________________________________________
Nocoes básicas HTML 2 - MIMO 
___________________________________________________________________________________________________________________________________________________________________
HTML Também nos permite adicionar imagens a uma página da web

--->Comando
<img src="https://mimo.app/i/dog.png">
<img src="https://mimo.app/i/cat.png">

- Para adicionar imagens a uma página web, comecamos com a tag <img> 
    <h3>Drawing of <em>Eathrise</em></h3>
    <img>

- <img> tag vazia

- Para exibir uma imagem precisa do atributo src. Que significa fonte.
    <h3>Drawing of <em>Eathrise</em></h3>
    <img src="https://mimo.app/i/earth.png">
  
- Nõs definimos a imagem que queremos exibir com um sinal de = e entre "" duplas 

- Podemos usar atributos para alterar o tamanho das imagens. Os atributos width e height usam pixels como a unidade de medida padrão
    <img src="https://mimo.app/i/earth.png"width="100" height="200">

- height ajusta a altura de uma imagem

- src, width e height são atributos



___________________________________________________________________________________________________________________________________________________________________
Nocoes básicas HTML 2 - MIMO 
___________________________________________________________________________________________________________________________________________________________________

Atributos adicionam informacoes adicionais as tags




____________________________________________________________________________________________________________________________________________________________________________________________________________
CAIXA BRANCA: 
____________________________________________________________________________________________________________________________________________________________________________________________________________

Para criar uma caixa branca em HTML com CSS, use a tag <div> no HTML e aplique estilos CSS para definir a caixa como um retângulo branco com bordas, se necessário. 

Código HTML:
<div class="box">
  <!-- Conteúdo da caixa aqui -->
</div>
Código CSS:
Código


Codigo CSS:
.box {
  width: 200px;       /* Largura da caixa */
  height: 100px;      /* Altura da caixa */
  background-color: white; /* Cor de fundo da caixa (branco) */
  border: 1px solid black; /* Borda da caixa (opcional) */
  padding: 10px;      /* Preenchimento interno da caixa */
}


Explicação:
- <div>: A tag <div> cria um contêiner genérico para outros elementos HTML, ideal para criar caixas.
- class="box": Define uma classe para o elemento, permitindo que o CSS o selecione.
- width e height: Definem a largura e altura da caixa em pixels ou outras unidades.
- background-color: white: Define a cor de fundo da caixa como branco.
- border: 1px solid black: (Opcional) Define uma borda ao redor da caixa, com 1 pixel de espessura, sólida e de cor preta. Você pode alterar a cor e o estilo da borda.
- padding: 10px: (Opcional) Define o espaçamento interno da caixa, ou seja, a distância entre o conteúdo e a borda (se houver).

- Outras propriedades CSS úteis:
margin: Define o espaço externo ao redor da caixa, que a separa de outros elementos.
border-radius: Define os cantos arredondados da caixa.
text-align: Alinha o texto dentro da caixa.
display: Define como o elemento é exibido (por exemplo, block, inline, inline-block). 

____________________________________________________________________________________________________________________________________________________________________
Opcoes de fontes: 
____________________________________________________________________________________________________________________________________________________________________

Elemento para deixar em italico <em>texto</em>
Elemento para deixar em negrito <strong>texto</strong>

Para alterar a cor e a fonte no HTML, é necessário utilizar CSS. A propriedade color define a cor do texto, e a propriedade font-family especifica a fonte a ser utilizada. 
É possível aplicar CSS inline, dentro de um elemento <style>, ou em um arquivo CSS externo

color = cor do texto
font-family = fonte 

-->Alterar a cor do texto
CSS inline:
   <p style="color: blue;">Este texto está em azul.</p>

CSS em um elemento <style>:
   <style>
     p {
       color: green;
     }
   </style>
   <p>Este texto está em verde.</p>

CSS em um arquivo externo:
   <link rel="stylesheet" href="style.css">
   <p>Este texto está com a cor definida no arquivo CSS.</p>

No arquivo style.css:
   p {
     color: red;
   }

-->Alterar a fonte do texto

Escolhendo a fonte:

CSS inline:
   <p style="font-family: Arial, sans-serif;">Este texto está na fonte Arial.</p>


CSS em um elemento <style>:
   <style>
     p {
       font-family: "Courier New", Courier, monospace;
     }
   </style>
   <p>Este texto está na fonte Courier New.</p>


CSS em um arquivo externo:
   <link rel="stylesheet" href="style.css">
   <p>Este texto está com a fonte definida no arquivo CSS.</p>


No arquivo style.css:
   p {
     font-family: Georgia, serif;
   }



___________________________________________________________________________________________________________________________________________________________________
Exemplos de cores e fontes:
___________________________________________________________________________________________________________________________________________________________________

Cores:
color: blue; (azul)
color: #FF0000; (vermelho, hexadecimal)
color: rgb(0, 255, 0); (verde, RGB)
color: hsl(120, 100%, 50%); (verde, HSL)

Fontes:
font-family: Arial, sans-serif; (Arial, ou outra fonte sem serifa)
font-family: "Times New Roman", Times, serif; (Times New Roman, ou outra fonte serifada)
font-family: "Courier New", Courier, monospace; (Courier New, ou outra fonte de código)

___________________________________________________________________________________________________________________________________________________________________
Colocar imagem ao lado da outra:
___________________________________________________________________________________________________________________________________________________________________

Para colocar uma imagem ao lado da outra em HTML e CSS, você pode usar o CSS para modificar a propriedade display das imagens para inline-block ou usar o sistema de 
layout flexbox. O método display: inline-block é simples e eficaz para casos em que você precisa de mais controle sobre o espaçamento entre as imagens. Para o método 
flexbox, você pode envolver as imagens em um contêiner e configurar o CSS para alinhar os itens horizontalment

-->Metodo inline-block:

HTML
    <img src="imagem1.jpg" alt="Descrição da imagem 1">
    <img src="imagem2.jpg" alt="Descrição da imagem 2">

CSS
    img {
      display: inline-block; /* Permite que as imagens sejam tratadas como blocos de texto, permitindo que fiquem na mesma linha */
      vertical-align: top; /* Alinha as imagens no topo para evitar que elas se movam para baixo */
      width: 50%; /* Define a largura de cada imagem para ocupar metade da tela */
      margin-right: 10px; /* Adiciona um espaço de 10 pixels entre as imagens */
    }



-->Método flex-box

HTML
    <div class="imagens">
        <img src="imagem1.jpg" alt="Descrição da imagem 1">
        <img src="imagem2.jpg" alt="Descrição da imagem 2">
    </div>


CSS
    .imagens {
      display: flex; /* Define o contêiner como um layout flexbox */
      flex-direction: row; /* Alinha os itens horizontalmente */
      justify-content: space-between; /* Distribuí espaço entre os itens */
      align-items: center; /* Alinha os itens verticalmente */
    }

    .imagens img {
      width: 48%; /* Define a largura das imagens */
      height: auto; /* Mantém a proporção da imagem */
    }

Explicação:
- display: inline-block: Esta propriedade permite que as imagens se comportem como blocos de texto, permitindo que sejam colocadas na mesma linha. 
Ao combinar inline-block com a propriedade vertical-align, você pode ajustar a posição vertical das imagens para que não se movam para baixo.
- width: Define a largura das imagens. No exemplo acima, as imagens ocupam 50% da largura do contêiner, mas você pode ajustar o valor conforme necessário.
- margin-right: Adiciona um espaço entre as imagens. No exemplo acima, há 10 pixels de espaço entre as imagens.
- display: flex: Define o contêiner como um layout flexbox, permitindo que você controle a forma como os elementos são alinhados e espaçados.
- flex-direction: row: Define que os itens serão dispostos horizontalmente, lado a lado.
- justify-content: space-between: Distribuí espaços entre os itens, alinhando-os nas extremidades do contêiner.
- align-items: center: Alinha os itens verticalmente no centro do contêiner.
- width e height no flexbox: Define a largura e altura das imagens. No exemplo acima, a altura é definida como auto para manter a proporção da imagem. 

___________________________________________________________________________________________________________________________________________________________________
<div>:
___________________________________________________________________________________________________________________________________________________________________

- O <div> é elemento é usado como um contêiner para outros elementos HTML.

- O <div>elemento é, por padrão, um elemento de bloco, o que significa que ele ocupa toda a largura disponível e vem com quebras de linha antes e depois

- O <div>elemento não tem atributos obrigatórios, mas style, classe idsão comuns.

- <div> como um contêiner
  O <div>elemento é frequentemente usado para agrupar seções de uma página da web.



---> Comando/Exemplo: 
<div>
  <h2>London</h2>
  <p>London is the capital city of England.</p>
  <p>London has over 9 million inhabitants.</p>
</div>



- Alinhar ao centro um elemento <div>
  Se você tiver um <div>elemento que não seja 100% largo e quiser centralizá-lo, defina a marginpropriedade CSS como auto.

---> Comando/Exemplo: 
<style>
div {
  width:300px;
  margin:auto;
}
</style>


___________________________________________________________________________________________________________________________________________________________________
Vários elementos <div>:
_______________________________________________________________________________________________________________________________________________
Você pode ter muitos <div>contêineres na mesma página.

---> Comando/Exemplo: 
<div>
  <h2>London</h2>
  <p>London is the capital city of England.</p>
  <p>London has over 9 million inhabitants.</p>
</div>

<div>
  <h2>Oslo</h2>
  <p>Oslo is the capital city of Norway.</p>
  <p>Oslo has over 700,000 inhabitants.</p>
</div>

<div>
  <h2>Rome</h2>
  <p>Rome is the capital city of Italy.</p>
  <p>Rome has over 4 million inhabitants.</p>
</div>

___________________________________________________________________________________________________________________________________________________________________
Alinhando elementos <div>:
_______________________________________________________________________________________________________________________________________________
Existem diferentes métodos para alinhar elementos lado a lado, todos incluindo algum estilo CSS. Veremos os métodos mais comuns:

1. Flutuador
2. Bloco embutido
3. Flex
4. Grade


***1. Flutuador***
- A propriedade CSS floatnão foi originalmente criada para alinhar <div>elementos lado a lado, mas tem sido usada para esse propósito há muitos anos.
- A propriedade CSS floaté usada para posicionar e formatar conteúdo e permite que os elementos sejam posicionados horizontalmente, em vez de verticalmente.

---> Comando/Exemplo:
Como usar float para alinhar elementos div lado a lado:

<style>
.mycontainer {
  width:100%;
  overflow:auto;
}
.mycontainer div {
  width:33%;
  float:left;
}
</style>


***2. Bloco embutido***
- Se você alterar a propriedade <div>do elemento de para , os elementos não adicionarão mais uma quebra de linha antes e depois e serão exibidos lado a lado em vez 
de um sobre o outro.displayblockinline-block<div>

---> Comando/Exemplo:
Como usar display: inline-block para alinhar elementos div lado a lado:

<style>
div {
  width: 30%;
  display: inline-block;
}
</style> 


---> Comando/Exemplo 02:
<!DOCTYPE html>
<html>
<style>
div {
  width:30%;  
  display:inline-block;
}
</style>
<body>

<div style="background-color:#FFF4A3;">
  <h2>London</h2>
  <p>London is the capital city of England.</p>
  <p>London has over 9 million inhabitants.</p>
</div>

<div style="background-color:#FFC0C7;">
  <h2>Oslo</h2>
  <p>Oslo is the capital city of Norway.</p>
  <p>Oslo has over 700,000 inhabitants.</p>
</div>

<div style="background-color:#D9EEE1;">
  <h2>Rome</h2>
  <p>Rome is the capital city of Italy.</p>
  <p>Rome has over 4 million inhabitants.</p>
</div>

</body>
</html>



***3.Flex***
- O módulo CSS Flexbox Layout foi introduzido para facilitar o design de uma estrutura de layout responsiva flexível sem usar float ou posicionamento.
- Para fazer o método flex do CSS funcionar, envolva os <div>elementos com outro <div>elemento e dê a ele o status de um contêiner flex.

---> Comando/Exemplo:
Como usar o flex para alinhar elementos div lado a lado:

<style>
.mycontainer {
  display: flex;
}
.mycontainer > div {
  width:33%;
}
</style>


---> Comando/Exemplo 02:
<!DOCTYPE html>
<html>
<head>
<style>
.mycontainer {
  display: flex;
}
.mycontainer > div {
  width:33%;
}
</style>
</head>
<body>

<h1>Flexbox Example</h1>

<p>Align three DIV elements side by side.</p>

<div class="mycontainer">

  <div style="background-color:#FFF4A3;">
    <h2>London</h2>
    <p>London is the capital city of England.</p>
    <p>London has over 9 million inhabitants.</p>
  </div>
  
  <div style="background-color:#FFC0C7;">
    <h2>Oslo</h2>
    <p>Oslo is the capital city of Norway.</p>
    <p>Oslo has over 700,000 inhabitants.</p>
  </div>
  
  <div style="background-color:#D9EEE1;">
    <h2>Rome</h2>
    <p>Rome is the capital city of Italy.</p>
    <p>Rome has over 4 million inhabitants.</p>
  </div>

</div>

</body>
</html>


