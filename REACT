____________________________________________________________________________________________________________________________________________________________________________________________________________
INTRODUCAO/ INICIO
____________________________________________________________________________________________________________________________________________________________________________________________________________
üåê https://pt-br.react.dev/learn

- As aplica√ß√µes React s√£o compostas por componentes. Um componente √© uma parte da IU (interface do usu√°rio) que possui sua pr√≥pria l√≥gica e apar√™ncia. Um componente pode ser t√£o pequeno quanto um bot√£o, 
ou t√£o grande quanto uma p√°gina inteira.

- Componentes do React s√£o fun√ß√µes JavaScript que retornam marca√ß√£o (markup):

---Exemplo/Modelo-------------------------------
function MyButton() {
  return (
    <button>Eu sou um bot√£o</button>
  );
}

------------------------------------------------

- Agora que voc√™ declarou MyButton, voc√™ pode aninh√°-lo em outro componente:

---Exemplo/Modelo-------------------------------
export default function MyApp() {
  return (
    <div>
      <h1>Bem-vindo ao meu aplicativo</h1>
      <MyButton />
    </div>
  );
}
------------------------------------------------

- Repare que <MyButton /> come√ßa com letra mai√∫scula. 
- √â dessa forma que voc√™ identifica um componente React. 
- Os nomes dos componentes React sempre devem COMECAR com letra MAI√öSCULA, enquanto as tags HTML devem ser em MIN√öSCULAS

REACT ---> Comeca c LETRA MAI√öSCULA
HTML ---> Comeca c LETRA MIN√öSCULAS


---Exemplo/Modelo-------------------------------
function MyButton() {
  return (
    <button>
      Eu sou um bot√£o
    </button>
  );
}

export default function MyApp() {
  return (
    <div>
      <h1>Bem-vindo ao meu aplicativo</h1>
      <MyButton />
    </div>
  );
}
------------------------------------------------

A palavra-chave export default especifica o componente principal no arquivo. 

üåêhttps://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/export
üåêhttps://javascript.info/import-export 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üìù Escrevendo marca√ß√µes (markup) com JSX
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- A sintaxe de marca√ß√£o que voc√™ viu acima √© chamada de JSX. Ela √© opcional, mas a maioria dos projetos React utiliza JSX pela sua conveni√™ncia.
- Todas as todas as ferramentas de desenvolvimento que recomendamos suportam JSX prontamente.

- JSX √© mais rigoroso do que HTML. 
  - Voc√™ precisa fechar as tags, como <br />
  - Seu componente n√£o pode retornar v√°rias tags JSX separadas.
  - Voc√™ precisa envolv√™-las em um elemento pai compartilhado, como um <div>...</div> ou um <>...</> vazio:


---Exemplo/Modelo-------------------------------
function AboutPage() {
  return (
    <>
      <h1>Sobre</h1>
      <p>Ol√°.<br />Como vai?</p>
    </>
  );
}
-------------------------------------------------

Se voc√™ tiver muito HTML para converter para JSX, voc√™ pode usar um conversor online.
üåê https://transform.tools/html-to-jsx 



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üé® Adicionando estilos
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- No React, voc√™ define uma classe CSS usando className, que funciona da mesma forma que o atributo HTML class:

---Exemplo/Modelo-------------------------------

<img className="avatar" />

-------------------------------------------------

- Depois, voc√™ escreve o CSS para esse elemento em um arquivo CSS separado:

---Exemplo/Modelo-------------------------------

/* No seu arquivo CSS */
.avatar {
  border-radius: 50%;
}
-------------------------------------------------

- O React n√£o especifica como voc√™ adiciona arquivos CSS. 
- No caso mais simples, voc√™ adicionar√° uma tag <link> ao seu HTML.
- Se voc√™ estiver usando uma ferramenta de constru√ß√£o ou um framework, consulte sua documenta√ß√£o para aprender como adicionar um arquivo CSS ao seu projeto.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exibindo dados 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- JSX permite que voc√™ coloque marca√ß√£o dentro do JavaScript.
- As chaves permitem que voc√™ insira express√µes JavaScript.
- sso √© √∫til para incorporar vari√°veis do seu c√≥digo e exibi-las para o usu√°rio. 
**Por exemplo, isso ir√° exibir user.name:

---Exemplo/Modelo-------------------------------
return (
  <h1>
    {user.name}
  </h1>
);
-------------------------------------------------

- Voc√™ tamb√©m pode incorporar express√µes JavaScript a partir de atributos JSX, mas voc√™ deve usar chaves em vez de aspas. Por exemplo, className="avatar" passa a string "avatar" como a classe CSS, 
mas src={user.imageUrl} l√™ o valor da vari√°vel JavaScript user.imageUrl, e ent√£o passa esse valor como o atributo src:

---Exemplo/Modelo-------------------------------
return (
  <img
    className="avatar"
    src={user.imageUrl}
  />
);
-------------------------------------------------

Voc√™ tamb√©m pode colocar express√µes mais complexas dentro das chaves do JSX, por exemplo, concatena√ß√£o de strings

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Renderiza√ß√£o condicional 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
No React, n√£o existe uma sintaxe especial para escrever condi√ß√µes. Voc√™ usar√° as mesmas t√©cnicas que utiliza ao escrever c√≥digo JavaScript convencional. Por exemplo, voc√™ pode usar uma instru√ß√£o if 
para incluir JSX condicionalmente:

---Exemplo/Modelo-------------------------------
let content;
if (isLoggedIn) {
  content = <AdminPanel />;
} else {
  content = <LoginForm />;
}
return (
  <div>
    {content}
  </div>
);
-------------------------------------------------

- Se preferir um c√≥digo mais compacto, voc√™ pode utilizar o operador condicional ?. Ao contr√°rio do if, ele funciona dentro do JSX:
- Quando voc√™ n√£o precisa do caso else, voc√™ pode usar uma sintaxe mais curta com o operador l√≥gico &&:
- Todas essas abordagens tamb√©m funcionam para especificar atributos condicionalmente. Se voc√™ n√£o estiver familiarizado com algumas dessas sintaxes JavaScript, pode come√ßar sempre 
  usando if...else.



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Renderizando listas 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Voc√™ ir√° depender de recursos do JavaScript como o loop for e a fun√ß√£o map() de arrays
- Dentro do seu componente, use a fun√ß√£o map() para transformar um array de produtos em um array de itens <li>:
- Normalmente, uma chave deve vir dos seus dados, como um ID de banco de dados. O React utiliza essas chaves para entender as mudan√ßas que ocorrem se voc√™ posteriormente inserir, excluir ou reordenar 
  os itens.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Respondendo a eventos 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Voc√™ pode responder a eventos declarando fun√ß√µes de event handler dentro dos seus componentes:
- Note como onClick={handleClick} n√£o tem par√™nteses no final! N√£o chame a fun√ß√£o de manipulador de evento: voc√™ s√≥ precisa pass√°-la. O React chamar√° seu manipulador de evento quando o usu√°rio 
  clicar no bot√£o.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Atualizando a tela
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Normalmente, voc√™ vai querer que seu componente ‚Äúlembre‚Äù algumas informa√ß√µes e as exiba. Por exemplo, talvez voc√™ queira contar o n√∫mero de vezes que um bot√£o √© clicado. Para fazer isso, adicione 
  estados ao seu componente.



____________________________________________________________________________________________________________________________________________________________________________________________________________
COMPONENTES 
_________________________________________________________________________________________________________________________________________________________________________________________________________
Os Componentes s√£o um dos conceitos centrais do React. Eles s√£o a base das interfaces de usu√°rio (UI), o que os torna o lugar perfeito para come√ßar 
sua jornada com React!

üìåPontos importantes:
- O React permite que voc√™ crie componentes, elementos de UI reutiliz√°veis para sua aplica√ß√£o.
- Em uma aplica√ß√£o React, cada parte da UI √© um componente.
- Os componentes do React s√£o fun√ß√µes comuns do JavaScript, mas com duas diferen√ßas importantes:
    - Seus nomes sempre come√ßam com letra mai√∫scula.
    - Eles retornam JSX.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Seu Primeiro Componente
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Um componente React √© uma fun√ß√£o JavaScript que permite voc√™ adicionar tags HTML. 


üõ†Ô∏è COMO CONSTRUIR COMPONENTE :

1Ô∏è‚É£ Passo 1: Exportar o componente 
- O prefixo export default √© uma sintaxe padr√£o do JavaScript (n√£o espec√≠fica do React).
- Ele permite que voc√™ marque a fun√ß√£o principal em um arquivo para que voc√™ possa mais tarde import√°-la de outros arquivos. 
- Sobre exportacao e importacao https://pt-br.react.dev/learn/importing-and-exporting-components 

2Ô∏è‚É£ Passo 2: Definir a fun√ß√£o 
- Com a sintaxe function Profile() { } voc√™ est√° definindo uma fun√ß√£o JavaScript chamada Profile.
‚ùó Os componentes do React s√£o fun√ß√µes comuns do JavaScript, mas seus nomes devem come√ßar com letra MAI√öSCULA ou n√£o funcionar√£o!

3Ô∏è‚É£ Passo 3: Adicionar HTML
- O componente retorna uma tag <img /> com os atributos src e alt.
- O <img /> √© escrito como HTML, mas na verdade, √© o JavaScript que est√° por tr√°s! Essa sintaxe √© chamada JSX e permite usar 
  tags HTML dentro do JavaScript.
- As instru√ß√µes de retorno podem ser escritas todas em uma linha, como neste componente:

return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;

- Mas se seu HTML n√£o estiver na mesma linha que a declara√ß√£o return, voc√™ deve coloc√°-la entre par√™nteses:

return (
  <div>
    <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  </div>
);

‚ùó Sem par√™nteses, qualquer c√≥digo nas linhas ap√≥s return ser√° ignorado!

4Ô∏è‚É£ Usando um componente:
- Agora que voc√™ definiu seu componente Profile, voc√™ pode coloc√°-lo dentro de outros componentes. 
- Por exemplo, voc√™ pode exportar um componente Gallery que usa v√°rias vezes o componente Profile:

function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Cientistas incr√≠veis</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Importando e Exportando Componentes
----------------------------------------------------------------------------------------------------------------------------------------------------------
- A magia dos componentes reside na sua habilidade de reutiliza√ß√£o: voc√™ pode criar um componente que √© composto por outros componentes. 
- Mas conforme voc√™ aninha mais e mais componentes, faz sentido come√ßar a dividi-los em arquivos diferentes. 
- Isso permite que voc√™ mantenha seus arquivos f√°ceis de explorar e reutiliza-los em mais lugares.



