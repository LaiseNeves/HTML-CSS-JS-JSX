____________________________________________________________________________________________________________________________________________________________
JAVASCRIPT - SE√á√ÉO 1. No√ß√µes b√°sicas de JavaScript
____________________________________________________________________________________________________________________________________________________________

-  JavaScript , uma linguagem de codifica√ß√£o vers√°til.
-  Linguagem de programa√ß√£o que alimenta sites e aplicativos din√¢micos.
-  Sites din√¢micos precisam memorizar informa√ß√µes para exibi-las ou alter√°-las. Para isso, o JavaScript possui vari√°veis .
-  Assim como as caixas de mudan√ßa, as vari√°veis ‚Äã‚Äãt√™m conte√∫do e nomes que nos dizem o que h√° dentro.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
CRIANDO VARIAVEIS
-----------------------------------------------------------------------------------------------------------------------------------------------------------

- Usamos let, e const para criar vari√°veis.
let
const

-  Cada vari√°vel precisa de um nome . 
-  Os nomes das vari√°veis ‚Äã‚Äãprecisam ser palavras simples e, portanto, n√£o devem ter espa√ßos.

let city
 
-  Para criar nomes de vari√°veis ‚Äã‚Äãcom v√°rias palavras, usamos camel case . 

let homeCity

-  Para nos ajudar a entender o que h√° dentro de uma vari√°vel, escolhemos nomes descritivos.

const  windyCity

-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VARIAVEIS
-----------------------------------------------------------------------------------------------------------------------------------------------------------

- Podemos adicionar valores de string junto com um + sinal.

"Followers:" + "55";

- Chamamos a adi√ß√£o de valores de string de express√£o porque ela cria um √∫nico valor de string.
- Adicione a express√£o entre par√™nteses de console.log().

console.log("Followers:" + "55");

- Quando express√µes cont√™m vari√°veis, elas usam os valores nas vari√°veis.

const followers = "55";
"Followers:" + followers;

- Podemos usar console.log() para ver os resultados das express√µes.
- console.log() = print() 

const numberOfFollowers = "55";
console.log("Followers:" + numberOfFollowers);

- Como as express√µes se tornam valores, podemos atribu√≠-las √†s vari√°veis ‚Äã‚Äãda mesma forma que os valores.

   const label = "Posts:" + "13";
   console.log(label);

   const temperature = "14";
   console.log(temperature + " degrees");

   const title = "Ms. ";
   const name = "Irene";
   console.log(title + name);

   const numberOfLikes = "40 ";
   console.log(numberOfLikes + "likes");

‚ùó Sempre tem que colocar ; ‚ùó


---N√öMEROS---
- Existem outros tipos de valores tamb√©m, como n√∫meros , que N√ÉO s√£o delimitados por aspas duplas.

   const numberOfLikes = 5;

- Tamb√©m podemos criar express√µes com n√∫meros. Somamos os n√∫meros com o +sinal e os subtra√≠mos uns dos outros com o -sinal.

   const numberOfLikes = 5 + 1;
   console.log(numberOfLikes);

- Usamos o * sinal para multiplicar n√∫meros e o / sinal para dividir n√∫meros.

   const percent = 0.5 * 100;
   console.log(percent);

- Quando armazenamos n√∫meros em vari√°veis, tamb√©m podemos us√°-las para c√°lculos.

   const numberOfSteps = 70;
   console.log("You're on step:");
   console.log(numberOfSteps + 1);

- Como as express√µes se tornam valores, podemos armazenar os resultados dos c√°lculos em vari√°veis.

   const private = 3;
   const public = 10;
   const totaL = private + public;
   console.log("Total posts: " + total);


-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VERDADEIRO E/OU FALSO (BOOLEANO) Pt.01
----------------------------------------------------------------------------------------------------------------------------------------------------------
- H√° um valor especial que n√£o √© uma string nem um n√∫mero: true.
- N√£o h√° aspas e n√£o √© um valor num√©rico.

‚ú®true √© √≥timo para situa√ß√µes como verificar se um interruptor est√° ligado ou se um recurso est√° habilitado

    console.log("Allow updates");
    console.log(true);

- Podemos armazenar trueem uma vari√°vel algo como uma string ou um n√∫mero.
- Armazene trueem uma vari√°vel e exiba-a no console.

    const correct = true;
    console.log(correct);


‚ú® false √© outro valor especial e o oposto de true. Podemos us√°-lo como true.

    console.log("Device charged");
    const status = false;
    console.log(status);

    console.log("Auto update");
    
    console.log(false);

-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VERDADEIRO E/OU FALSO (BOOLEANO) Pt.02
----------------------------------------------------------------------------------------------------------------------------------------------------------

- Um ‚ùó sinal antes de true faz com que a express√£o resulte em false
- Se algo n√£o √© verdadeiro, tem que ser falso.

üìå O ‚ùó sinal √© o operador de nega√ß√£o . Ele transforma valores em seus opostos .

- Quando mudamos um valor para seu oposto com !, n√≥s o negamos.

console.log(!true);
-----> Console output: false 

- O ! operador anterior a  false tamb√©m altera seu valor. Se um valor n√£o for false, ele ter√° que ser true.

console.log(!false);
-----> Console output: True

- Podemos usar o ! operador com vari√°veis ‚Äã‚Äãpara negar os valores que elas armazenam.

const isMorning = true;
console.log(! isMorning);
-----> Console output: false 

- Tamb√©m podemos salvar uma nega√ß√£o inteira em outra vari√°vel.
- Crie a vari√°vel isEveninge use !para mudar isMorningpara false.

const isMorning = true;
const isEvening = ! isMorning;
console.log(isEvening);
-----> Console output: false 

-----------------------------------------------------------------------------------------------------------------------------------------------------------
VEERIFICANDO A IGUALDADE N√öMERICA Pt.1
--------------------------------------------------------------------------------------------------------------------------------------------------------

- Aprendemos como criar e armazenar valores, mas como compar√°-los?
- Precisamos comparar n√∫meros em situa√ß√µes como verificar se o PIN inserido por um usu√°rio corresponde ao PIN salvo.

const enteredPin = 5448;
const expectedPin = 5440;

‚ú® Para comparar se dois n√∫meros s√£o iguais, usamos o operador de igualdade , ===.

5 === 5

- Ao comparar, h√° apenas dois resultados: trueou false.

- Quando comparamos os mesmos n√∫meros com o operador de igualdade, o resultado √© true.

console.log(10 === 10);

- Quando comparamos dois n√∫meros diferentes com o operador de igualdade, o resultado √© false.

console.log(9 === 10);


-----------------------------------------------------------------------------------------------------------------------------------------------------------
VEERIFICANDO A IGUALDADE N√öMERICA Pt.2
--------------------------------------------------------------------------------------------------------------------------------------------------------

- Para verificar se um n√∫mero n√£o √© igual a outro n√∫mero, usamos o operador de desigualdade , !==.

console.log(1!==10);

- Podemos armazenar o resultado de uma compara√ß√£o com o operador de desigualdade em uma vari√°vel.

const result = 1 !== 2;
console.log(result);

- Vari√°veis ‚Äã‚Äãtamb√©m podem armazenar o resultado de compara√ß√µes de igualdade.

const result = 1 === 2;
console.log(result);

- Podemos comparar valores com vari√°veis ‚Äã‚Äãe vari√°veis ‚Äã‚Äãcom outras vari√°veis.

const one = 1;
const two = 2;
console.log(one===two);
console.log(one !== two);

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Revis√£o
--------------------------------------------------------------------------------------------------------------------------------------------------------

const score = 1084;
const penalty = 500;

const total = score - penalty;
console.log(total);




-----------------------------------------------------------------------------------------------------------------------------------------------------------
JAVASCRIPT - SE√á√ÉO 2. TIPOS E COMPARACOES 
--------------------------------------------------------------------------------------------------------------------------------------------------------

xxxx



_________________________________________________________________________________________________________________________________________________________
PARAMETROS:
_________________________________________________________________________________________________________________________________________________________

Deve colocar um par√¢metro numa fun√ß√£o JavaScript quando esta precisa de receber dados externos para executar a sua l√≥gica ou para se tornar 
mais adapt√°vel e reutiliz√°vel. 

Se a fun√ß√£o realiza sempre a mesma tarefa sem variar os dados, pode n√£o precisar de par√¢metros. 

---> Quando usar Parametros: 
 - Diferentes dados para a mesma tarefa: Se a sua fun√ß√£o precisa de realizar a mesma a√ß√£o, mas com valores diferentes cada vez que √© chamada, 
   deve usar um par√¢metro. Por exemplo, uma fun√ß√£o para somar pode precisar de dois n√∫meros como par√¢metros. 
 - Adaptabilidade e Reutiliza√ß√£o: Par√¢metros tornam a fun√ß√£o mais vers√°til, permitindo que a mesma l√≥gica seja aplicada a diferentes cen√°rios 
   sem alterar o c√≥digo da fun√ß√£o. 
 - Passar informa√ß√µes externas: A fun√ß√£o precisa de dados que n√£o est√£o definidos internamente. Por exemplo, um par√¢metro pode ser um objeto 
   HTML para ser manipulado. 

---> Quando N√ÉO usar Parametros: 
 - Fun√ß√£o com l√≥gica fixa: Se a fun√ß√£o executa sempre os mesmos passos sem necessidade de input externo, ela n√£o precisa de par√¢metros.
 - Valores constantes dentro da fun√ß√£o: Se os dados necess√°rios para a fun√ß√£o est√£o j√° definidos e n√£o v√£o mudar, eles podem ser declarados diretamente dentro 
   da fun√ß√£o, sem serem passados como par√¢metros.

---> Compreendendo Par√¢metros e Argumentos:
 1. PARAMETRO:  √â a vari√°vel declarada nos par√™nteses quando a fun√ß√£o √© definida
 2. ARGUMENTOS:  √â o valor real que √© passado para a fun√ß√£o quando ela √© chamada

1. √â a vari√°vel declarada nos par√™nteses quando a fun√ß√£o √© definida (ex: numero1 em function somar(numero1, numero2)). 
2. √â o valor real que √© passado para a fun√ß√£o quando ela √© chamada (ex: 2 e 3 em somar(2, 3)). 



---> Exemplo Pr√°tico: 

- Com par√¢metro: Uma fun√ß√£o que exibe uma mensagem precisa de um par√¢metro mensagem para saber o que exibir

    function exibirMensagem(mensagem) {
        alert(mensagem);
    }
    exibirMensagem("Ol√°!"); // O argumento "Ol√°!" √© passado para o par√¢metro mensagem


- Sem par√¢metro: Uma fun√ß√£o que apenas diz "Ol√°!" sem nenhuma varia√ß√£o. 

    function saudacaoSimples() {
        alert("Ol√°!");
    }
    saudacaoSimples(); // N√£o √© passado nenhum argumento






