____________________________________________________________________________________________________________________________________________________________
JAVASCRIPT - SE√á√ÉO 1. No√ß√µes b√°sicas de JavaScript
____________________________________________________________________________________________________________________________________________________________

-  JavaScript , uma linguagem de codifica√ß√£o vers√°til.
-  Linguagem de programa√ß√£o que alimenta sites e aplicativos din√¢micos.
-  Sites din√¢micos precisam memorizar informa√ß√µes para exibi-las ou alter√°-las. Para isso, o JavaScript possui vari√°veis .
-  Assim como as caixas de mudan√ßa, as vari√°veis ‚Äã‚Äãt√™m conte√∫do e nomes que nos dizem o que h√° dentro.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
CRIANDO VARIAVEIS
-----------------------------------------------------------------------------------------------------------------------------------------------------------

- Usamos let, e const para criar vari√°veis.
let
const

-  Cada vari√°vel precisa de um nome . 
-  Os nomes das vari√°veis ‚Äã‚Äãprecisam ser palavras simples e, portanto, n√£o devem ter espa√ßos.

let city
 
-  Para criar nomes de vari√°veis ‚Äã‚Äãcom v√°rias palavras, usamos camel case . 

let homeCity

-  Para nos ajudar a entender o que h√° dentro de uma vari√°vel, escolhemos nomes descritivos.

const  windyCity

-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VARIAVEIS
-----------------------------------------------------------------------------------------------------------------------------------------------------------

- Podemos adicionar valores de string junto com um + sinal.

"Followers:" + "55";

- Chamamos a adi√ß√£o de valores de string de express√£o porque ela cria um √∫nico valor de string.
- Adicione a express√£o entre par√™nteses de console.log().

console.log("Followers:" + "55");

- Quando express√µes cont√™m vari√°veis, elas usam os valores nas vari√°veis.

const followers = "55";
"Followers:" + followers;

- Podemos usar console.log() para ver os resultados das express√µes.
- console.log() = print() 

const numberOfFollowers = "55";
console.log("Followers:" + numberOfFollowers);

- Como as express√µes se tornam valores, podemos atribu√≠-las √†s vari√°veis ‚Äã‚Äãda mesma forma que os valores.

   const label = "Posts:" + "13";
   console.log(label);

   const temperature = "14";
   console.log(temperature + " degrees");

   const title = "Ms. ";
   const name = "Irene";
   console.log(title + name);

   const numberOfLikes = "40 ";
   console.log(numberOfLikes + "likes");

‚ùó Sempre tem que colocar ; ‚ùó


---N√öMEROS---
- Existem outros tipos de valores tamb√©m, como n√∫meros , que N√ÉO s√£o delimitados por aspas duplas.

   const numberOfLikes = 5;

- Tamb√©m podemos criar express√µes com n√∫meros. Somamos os n√∫meros com o +sinal e os subtra√≠mos uns dos outros com o -sinal.

   const numberOfLikes = 5 + 1;
   console.log(numberOfLikes);

- Usamos o * sinal para multiplicar n√∫meros e o / sinal para dividir n√∫meros.

   const percent = 0.5 * 100;
   console.log(percent);

- Quando armazenamos n√∫meros em vari√°veis, tamb√©m podemos us√°-las para c√°lculos.

   const numberOfSteps = 70;
   console.log("You're on step:");
   console.log(numberOfSteps + 1);

- Como as express√µes se tornam valores, podemos armazenar os resultados dos c√°lculos em vari√°veis.

   const private = 3;
   const public = 10;
   const totaL = private + public;
   console.log("Total posts: " + total);


-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VERDADEIRO E/OU FALSO (BOOLEANO) Pt.01
----------------------------------------------------------------------------------------------------------------------------------------------------------
- H√° um valor especial que n√£o √© uma string nem um n√∫mero: true.
- N√£o h√° aspas e n√£o √© um valor num√©rico.

‚ú®true √© √≥timo para situa√ß√µes como verificar se um interruptor est√° ligado ou se um recurso est√° habilitado

    console.log("Allow updates");
    console.log(true);

- Podemos armazenar trueem uma vari√°vel algo como uma string ou um n√∫mero.
- Armazene trueem uma vari√°vel e exiba-a no console.

    const correct = true;
    console.log(correct);


‚ú® false √© outro valor especial e o oposto de true. Podemos us√°-lo como true.

    console.log("Device charged");
    const status = false;
    console.log(status);

    console.log("Auto update");
    
    console.log(false);

-----------------------------------------------------------------------------------------------------------------------------------------------------------
USANDO VERDADEIRO E/OU FALSO (BOOLEANO) Pt.02
----------------------------------------------------------------------------------------------------------------------------------------------------------

- Um ‚ùó sinal antes de true faz com que a express√£o resulte em false
- Se algo n√£o √© verdadeiro, tem que ser falso.

üìå O ‚ùó sinal √© o operador de nega√ß√£o . Ele transforma valores em seus opostos .

- Quando mudamos um valor para seu oposto com !, n√≥s o negamos.

console.log(!true);
-----> Console output: false 

- O ! operador anterior a  false tamb√©m altera seu valor. Se um valor n√£o for false, ele ter√° que ser true.

console.log(!false);
-----> Console output: True

- Podemos usar o ! operador com vari√°veis ‚Äã‚Äãpara negar os valores que elas armazenam.

const isMorning = true;
console.log(! isMorning);
-----> Console output: false 

- Tamb√©m podemos salvar uma nega√ß√£o inteira em outra vari√°vel.
- Crie a vari√°vel isEveninge use !para mudar isMorningpara false.

const isMorning = true;
const isEvening = ! isMorning;
console.log(isEvening);
-----> Console output: false 

-----------------------------------------------------------------------------------------------------------------------------------------------------------
VEERIFICANDO A IGUALDADE N√öMERICA Pt.1
--------------------------------------------------------------------------------------------------------------------------------------------------------

- Aprendemos como criar e armazenar valores, mas como compar√°-los?
- Precisamos comparar n√∫meros em situa√ß√µes como verificar se o PIN inserido por um usu√°rio corresponde ao PIN salvo.

const enteredPin = 5448;
const expectedPin = 5440;

‚ú® Para comparar se dois n√∫meros s√£o iguais, usamos o operador de igualdade , ===.

5 === 5

- Ao comparar, h√° apenas dois resultados: trueou false.

- Quando comparamos os mesmos n√∫meros com o operador de igualdade, o resultado √© true.

console.log(10 === 10);

- Quando comparamos dois n√∫meros diferentes com o operador de igualdade, o resultado √© false.

console.log(9 === 10);


-----------------------------------------------------------------------------------------------------------------------------------------------------------
VEERIFICANDO A IGUALDADE N√öMERICA Pt.2
--------------------------------------------------------------------------------------------------------------------------------------------------------








-----------------------------------------------------------------------------------------------------------------------------------------------------------
JAVASCRIPT - SE√á√ÉO 2. TIPOS E COMPARACOES 
--------------------------------------------------------------------------------------------------------------------------------------------------------
















